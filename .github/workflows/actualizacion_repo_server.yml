# Archivo destinado a realizar la carga de los cambios del repositorio en el servidor EC2 que usamos en el área.
# Las variables secretas están configuradas en Settings.

name: Carga de repositorio a la M.V EC2 proporcionada por Telco.

on:
  push:
    branches:
      - main  # Ejecutar este workflow en cada push a la rama principal

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Objetivo: añadir la clave SSH al agente que se conectará al servidor.
    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.AWS_PEM }}

    # Objetivo: Verificar que la conexión se realizó exitosamente.
    - name: Verify SSH connection
      env:
        EC2_IP: ${{ secrets.AWS_HOST }}
        EC2_USER: ${{ secrets.AWS_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP "echo 'Conexión exitosa a EC2'"

    # Objetivo: Clonar o actualizar el repositorio en el servidor EC2
    - name: Deploy to EC2
      env:
        EC2_IP: ${{ secrets.AWS_HOST }}
        EC2_USER: ${{ secrets.AWS_USER }}
        REPO_URL: ${{ secrets.HTTP_GIT }}  # URL del repositorio - es la dirección SSH o HTTP que usamos para el git clone
        DEPLOY_DIR: ${{ secrets.PATH_FOLDER_SAVE }}  # Directorio de despliegue en EC2 -destino_git
      run: |
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP "
          if [ ! -d '$DEPLOY_DIR' ]; then
            sudo mkdir -p '$DEPLOY_DIR'
            cd '$DEPLOY_DIR'
            sudo git clone '$REPO_URL' .
            sudo chmod 777 -R '$DEPLOY_DIR'
          else
            cd '$DEPLOY_DIR'
            sudo git reset --hard HEAD
            sudo git pull origin main
            sudo chmod 777 -R '$DEPLOY_DIR'
          fi
        "
    # Objetivo: Crear el archivo .env en el servidor EC2 con la variable GOOGLE_SHEETS_API_KEY
    - name: Create .env file on EC2
      env:
        EC2_IP: ${{ secrets.AWS_HOST }}
        EC2_USER: ${{ secrets.AWS_USER }}
        GOOGLE_SHEETS_API_KEY: ${{ secrets.GOOGLE_SHEETS_API_KEY }}
        DEPLOY_DIR: ${{ secrets.PATH_FOLDER_SAVE }}
        HOST_DBB: ${{secrets.HOST_DBB}}
        USER_DBB: ${{secrets.USER_DBB}}
        PASSWORD_DBB: ${{secrets.PASSWORD_DBB}}
        NAME_DBB_DATALAKE_ECONOMICO: ${{secrets.NAME_DBB_DATALAKE_ECONOMICO}}
        NAME_DBB_DWH_ECONOMICO: ${{secrets.NAME_DBB_DWH_ECONOMICO}}
        NAME_DBB_DATALAKE_SOCIO: ${{secrets.NAME_DBB_DATALAKE_SOCIO}}
        NAME_DBB_DWH_SOCIO: ${{secrets.NAME_DBB_DWH_SOCIO}}
        NAME_IPECD_ECONOMICO: ${{secrets.NAME_IPECD_ECONOMICO}}

        FOLDER_PROYECTO: scrapingTrabajo
      run: |
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP "
          echo 'Creando o actualizando archivo .env'
  
          cd $DEPLOY_DIR
  
          # Verificar si el archivo .env existe
          if [ -f .env ]; then
            echo 'El archivo .env existe, limpiando...'
            sudo rm .env
          fi
  
          # Crear el archivo .env con las nuevas variables
          echo 'GOOGLE_SHEETS_API_KEY=$GOOGLE_SHEETS_API_KEY' >> .env
          echo 'HOST_DBB=$HOST_DBB' >> .env
          echo 'USER_DBB=$USER_DBB' >> .env
          echo 'PASSWORD_DBB=$PASSWORD_DBB' >> .env
          echo 'NAME_DBB_DATALAKE_ECONOMICO=$NAME_DBB_DATALAKE_ECONOMICO' >> .env
          echo 'NAME_DBB_DWH_ECONOMICO=$NAME_DBB_DWH_ECONOMICO' >> .env
          echo 'NAME_DBB_DATALAKE_SOCIO=$NAME_DBB_DATALAKE_SOCIO' >> .env
          echo 'NAME_DBB_DWH_SOCIO=$NAME_DBB_DWH_SOCIO' >> .env
  
          # Mostrar el contenido del archivo .env
          cat .env
        "
